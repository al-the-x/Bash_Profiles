## Keep history separated by process
unsetopt SHARE_HISTORY

## Disable scroll lock via `Ctrl-S`
stty -ixon

export EDITOR="$(which nvim || which vim 2>/dev/null)"
export VISUAL="$EDITOR"

export _git_log_oneline_format='%C(green)%h %C(blue)(%an) %C(reset)%s%C(red)%d%C(reset)'
export _git_log_medium_format='%C(bold)Commit:%C(reset) %C(green)%H%C(red)%d%n%C(bold)Author:%C(reset) %C(cyan)%an <%ae>%n%C(bold)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%C(bold)Committer:%C(reset) %C(cyan)%cn <%ae>%n%C(bold)Date:%C(reset)   %C(blue)%ci (%cr)%C(reset)%n%+B'

alias j='jobs'
alias .f='dotfiles'

alias vimrc='vim -c "edit $MYVIMRC"'
alias vims="vim-session-branch"
alias zshalias="vim ~/.zshalias && source ~/.zshalias"
alias grepc="grep --color=always"

alias today='gdate -d today -I'
alias yesterday='gdate -d yesterday -I'
alias tomorrow='gdate -d tomorrow -I'

alias downcase='tr \[:upper:\] \[:lower:\]'
alias kebab-case='tr \[:blank:\] -'

## From `brew install hub`
alias gpr='git pull-request -o'
alias ggo='git browse'

## From `brew install git extras`
alias gwi='git ignore'
alias gbp='git-delete-merged-branches'

## Replacing `git ll` and `git la`...
alias gll='git log --graph --pretty=format:"${_git_log_oneline_format}"'
alias gla='gll --all'

## Missing from Prezto?
alias gwm='git mv'
alias gwM='git mv --force'

## Prezto got this one wrong...
alias gcf='git commit --amend --no-edit'
function gpc {
  git push --set-upstream origin HEAD:${1:-$(git-branch-current 2>/dev/null)}
}
unalias gpc

## Update `master`...
alias gfu='gf origin master:master'
alias gri='git rebase --interactive --autosquash'

alias shrug='echo "¯\_(ツ)_/¯"'

## Application shortcuts...

##
# Load a directory-specific `.zshrc` if it exists, traversing up to parents,
# similarly to how `direnv` does but ZSH-specific. Useful for loading aliases
# and completion specific to a project.
function load-local-conf {
  local cwd=$PWD

  while [[ $cwd != $HOME ]]; do
    [[ -f $cwd/.zshrc ]] && {
      echo "load-local-conf: $cwd/.zshrc"
      source $cwd/.zshrc
    }
    cwd=$(realpath $cwd/..)
  done
}
add-zsh-hook chpwd load-local-conf

## Find WTF this command is... with regex!
## b/c prezto ships with too many dang aliases to remember them all...
function wtf {
  alias | grep $@
}


##
# My primary CASTLE is named `dotfiles`
##
function dotfiles {
  [ $# -ge 1 ] || {
    cat >&2 <<'USAGE'
  usage: dotfiles COMMAND [options]

    Proxy for `homesick COMMAND dotfiles [options]`
USAGE

    homesick --help; return 1
  }

  CMD="$1"; shift
  homesick $CMD dotfiles $@
}

function vim {
  if [ $+commands[nvim] ]; then
    nvim "$@"
  else
    command vim "$@"
  fi
}

function vundle {
  [[ $# > 0 ]] || {
    vim +'tab help vundle' +-tabc
    return
  }

  vim --headless +:Vundle${(C)1} +:qa
}
## Run VundleInstall
function vim-install {
  vundle install
}

##
# Create a new `vim` session tracked with `:Obsession`
##
function vim-session {
  SESSION="$1"; shift

  ##
  # I'm not entirely certain that `vim-obsession` will start tracking just
  # because a session is started, but we'll see...
  ##
  vim -S "$SESSION" -c "Obsession $SESSION" $@
}

##
# Create or open a `vim-session` named like `git-branch-current` and stored in
# a directory named `.vim/` at the root of the work-tree.
##
function vim-session-branch {
  local session="$(git-root)/.vim/$(git-branch-current).vim"
  mkdir -p ${session:h} && vim-session $session $@
}

function vim-session-expired {
  typeset -a sessions branches

  SESSION_PATH=${SESSION_PATH:-"$(git-root)/.vim"}

  sessions=( "${(@f)$(print $SESSION_PATH/*.vim(:t))}" )

  branches=( "${(@f)$(git branches)}" )

  [ -n "$DEBUG" ] && {
    echo all branches: ${=branches}
    echo all sessions: ${=sessions}
  }

  for b in $branches; do
    sessions[$sessions[(i)"$b.vim"]]=()
  done

  echo $sessions
}

function vim-session-retire {
  typeset -a sessions branches

  [[ $# > 0 ]] && {
    sessions=( "$@" )
  } || {
    sessions=( $(vim-session-expired) )
  }

  echo "Sessions to delete (${#sessions}):"
  for (( idx = 1; idx <= ${#sessions}; idx++ )) do
    echo "- ${sessions[$idx]}"
  done

  read -q \?'Delete these sessions?' && {
    for (( idx = 1; idx <= ${#sessions}; idx++ )) do
      rm -f $SESSION_PATH/${sessions[$idx]}
    done
  }
}

##
# List local branches that aren't `master`, `staging` or `prod` in a manner that
# they can be piped to `xargs` et al
##
function git-branch-list {
  git for-each-ref --format="%(refname:short)" refs/heads/ | grep -v '^\(master\|sta\?g\|pro\?d\)$'
}

function git-branch-orphan {
  git for-each-ref --format="%(refname:short) %(upstream)" refs/heads/ | awk '$2 !~/^refs\/remotes/'
}
##
# Create a new branch and open a `vim-session-branch` for it
##
function git-branch-session {
  branch="$1"; shift
  { git checkout $1 || git checkout -b $1 } && vim-session-branch $@
}

function base64url {
  tr -- '-_' '+/' | base64 $@
}

##
# Print all the lines between two markers or that appear _after_ one marker
#
# TODO: Move into an autoloading function
##
function between {
  if [ $# -lt 1 ]; then
    cat <<'USAGE'
  usage: between START END

    Print input from `stdin` that appears between `START`
    and `END` markers, as long as they appear on a single
    line.

    EXAMPLE

    $> between.zsh | between USAGE EXAMPLE
      usage: between START END

        Print input from `stdin` that appears between `START`
        and `END` markers, as long as they appear on a single
        line.
USAGE

    return 1
  fi
  if [ $# -gt 1 ]; then
    gawk "/${1}/{keep=1}/${2}/{keep=0} keep"
  else
    gawk "/${1}/{keep=1}keep"
  fi
} ## END between

## Print a random line from a file...
## TODO: Move into an autoloading function
function randline {
  integer lines=$(wc -l <$1)
  sed -n $[RANDOM % lines + 1]p $1
} ## END randline


## Fixup the SSH environment variables inside tmux...
### TODO: Move into an autoloading function
function ssh-fix {
  [[ -n "$TMUX" && -n "$SSH_CONNECTION" ]] && {
    eval "$(tmux showenv | grep -v '^-' | sed -e 's/=\(.*\)/="\1"/' -e 's/^/export /')"
  }
}

function colorize {
  COLOR="${1:=white}"; shift
  ack --flush --passthru --color --color-match="$COLOR" $@
}

function colorize-log {
#  let PATTERNS=${(fA)PATTERNS:="$(
#    red ERROR
#    yellow 'WARN(ING)?'
#    blue INFO
#    green 'DEBUG(GER|GING)?'
#    'bold white' TRACE
#    magenta '\d{4}-\d{2}-\d{2}(T| )\d{2}(:\d{2}){2}'
#    magenta '[\w-/\.]+(:\d+)?'
#  )"}
#
#  let pipeline=()
#
#  for color pattern in $PATTERNS; do
#    pipeline+=( "colorize $color $pattern" )
#  done
#
#  echo $pipeline; exit

  colorize red ERROR | \
  colorize yellow 'WARN(?:ING)?' | \
  colorize blue INFO | \
  colorize green 'DEBUG(?:GER|GING)?' | \
  colorize white TRACE | \
  colorize magenta '(\d{4}-\d{2}-\d{2}(T| )\d{2}(\:\d{2}){2})' | \
  colorize magenta '(([\w-]+/)*[\w-]+\.\w{,3}(:\d+)?)'
}
